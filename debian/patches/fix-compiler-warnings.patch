Description: Fix up compiler warnings in codebase, including:
 - Unwind complex deferencing of pointers resolving:
   "warning: dereferencing type-punned pointer will break strict-aliasing rules"
 - Remove unused variable from the codebase:
   "warning: variable 'numFDs' set but not used"
 - Cast parameters properly for formatting in fprintf:
   "warning: format '%d' expects argument of type 'int', but argument 3 has type 'size_t'"
 - Interim cast to intprt_t when passing FD's as ClientData pointers:
   "warning: cast to pointer from integer of different size"
Author: James Page <james.page@ubuntu.com>
Bug-Ubuntu: https://bugs.launchpad.net/bugs/1017978
Forwarded: yes, fastcgi-developers@mailman.fastcgi.com

--- a/libfcgi/fcgiapp.c
+++ b/libfcgi/fcgiapp.c
@@ -1486,16 +1486,17 @@ static int ProcessManagementRecord(int t
         }
         len = responseP - &response[FCGI_HEADER_LEN];
         paddedLen = AlignInt8(len);
-        *((FCGI_Header *) response)
-            = MakeHeader(FCGI_GET_VALUES_RESULT, FCGI_NULL_REQUEST_ID,
-                         len, paddedLen - len);
+        FCGI_Header *header = (FCGI_Header *)response;
+        *header = MakeHeader(FCGI_GET_VALUES_RESULT, FCGI_NULL_REQUEST_ID,
+                             len, paddedLen - len);
         FreeParams(&paramsPtr);
     } else {
         paddedLen = len = sizeof(FCGI_UnknownTypeBody);
-        ((FCGI_UnknownTypeRecord *) response)->header
+        FCGI_UnknownTypeRecord *utr = (FCGI_UnknownTypeRecord *) response;
+        utr->header
             = MakeHeader(FCGI_UNKNOWN_TYPE, FCGI_NULL_REQUEST_ID,
                          len, 0);
-        ((FCGI_UnknownTypeRecord *) response)->body
+        utr->body
             = MakeUnknownTypeBody(type);
     }
     if (write_it_all(data->reqDataPtr->ipcFd, response, FCGI_HEADER_LEN + paddedLen) < 0) {
--- a/cgi-fcgi/cgi-fcgi.c
+++ b/cgi-fcgi/cgi-fcgi.c
@@ -386,8 +386,8 @@ static void WebServerReadHandler(ClientD
     if(bytesRead < 0) {
         exit(OS_Errno);
     }
-    *((FCGI_Header *) &fromWS.buff[0])
-            = MakeHeader(FCGI_STDIN, requestId, bytesRead, 0);
+    FCGI_Header *header = (FCGI_Header *) &fromWS.buff[0];
+    *header = MakeHeader(FCGI_STDIN, requestId, bytesRead, 0);
     bytesToRead -= bytesRead;
     fromWS.stop = &fromWS.buff[sizeof(FCGI_Header) + bytesRead];
     webServerReadHandlerEOF = (bytesRead == 0);
@@ -458,7 +458,7 @@ static void ScheduleIo(void)
        ((length = fromWS.stop - fromWS.next) != 0)) {
 	if(OS_AsyncWrite(appServerSock, 0, fromWS.next, length,
 			 AppServerWriteHandler,
-			 (ClientData)appServerSock) == -1) {
+			 (ClientData)(intptr_t)appServerSock) == -1) {
 	    FCGIexit(OS_Errno);
 	} else {
 	    fcgiWritePending = TRUE;
@@ -474,7 +474,7 @@ static void ScheduleIo(void)
 
 	if(OS_AsyncRead(appServerSock, 0, fromAS.next, BUFFLEN,
 			AppServerReadHandler,
-			(ClientData)appServerSock) == -1) {
+			(ClientData)(intptr_t)appServerSock) == -1) {
 	    FCGIexit(OS_Errno);
 	} else {
 	    fcgiReadPending = TRUE;
@@ -640,7 +640,7 @@ static int ParseArgs(int argc, char *arg
 			}
 			if((av[ac] = (char *)malloc(strlen(tp1)+1)) == NULL) {
 			    fprintf(stderr, "Cannot allocate %d bytes\n",
-				    strlen(tp1)+1);
+				        (int)strlen(tp1)+1);
 			    exit(-1);
 			}
 			strcpy(av[ac++], tp1);
@@ -722,7 +722,6 @@ int main(int argc, char **argv)
     char **envp = environ;
     int count;
     FCGX_Stream *paramsStream;
-    int numFDs;
     unsigned char headerBuff[8];
     int headerLen, valueLen;
     char *equalPtr;
@@ -821,10 +820,6 @@ int main(int argc, char **argv)
      */
     fromWS.stop = fromWS.next = &fromWS.buff[0];
     webServerReadHandlerEOF = FALSE;
-    /*
-     * XXX: might want to use numFDs in the os library.
-     */
-    numFDs = max(appServerSock, STDIN_FILENO) + 1;
     OS_SetFlags(appServerSock, O_NONBLOCK);
 
     if (bytesToRead <= 0)
